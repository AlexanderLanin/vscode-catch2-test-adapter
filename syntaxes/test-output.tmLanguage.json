{
  "id": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "$comment": "https://macromates.com/manual/en/language_grammars  https://www.apeth.com/nonblog/stories/textmatebundle.html",
  "scopeName": "source.test-output",
  "patterns": [
    {
      "begin": "\\[ RUN ",
      "patterns": [{ "include": "#gtest" }]
    },
    {
      "comment": "catch2 and doctest is matching on this and it is fine, they have similar output",
      "begin": "⏱Duration: ([\\d\\.]*)",
      "captures": {
        "1": {
          "name": "constant.numeric"
        }
      },
      "patterns": [{ "include": "#catch2" }]
    }
  ],
  "repository": {
    "values": {
      "patterns": [
        {
          "match": "\\b\\d+(\\.\\d+)?(e\\+\\d+)?\\b",
          "name": "constant.numeric"
        },
        {
          "match": "\\b(?i:(0?x)?[0-9a-f][0-9a-f]+)\\b",
          "name": "constant.numeric"
        },
        {
          "match": "\\b([0-9]+|true|false|null|nullptr)\\b",
          "name": "constant.language"
        },
        {
          "match": "\\S+@\\S+\\.\\S+",
          "name": "markup.bold"
        },
        {
          "match": "\\b(?i:([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}))\\b",
          "name": "support.class"
        },
        {
          "match": "\"(.*?)\"",
          "name": "string.quoted"
        },
        {
          "match": "'(.*?)'",
          "name": "string.quoted"
        }
      ]
    },
    "gtest": {
      "patterns": [
        {
          "match": "((.+)[:\\(]([0-9]+)\\)?|unknown file): (Failure|EXPECT_CALL|error)",
          "name": "comment",
          "captures": {
            "4": {
              "name": "keyword.control"
            }
          }
        },
        {
          "match": "Value of: (.+)",
          "name": "keyword",
          "captures": {
            "1": {
              "name": "string"
            }
          }
        },
        {
          "match": "The difference between (.+) and (.+) is (.+), which (exceeds) (.+), where",
          "captures": {
            "1": {
              "name": "constant.numeric"
            },
            "2": {
              "name": "constant.numeric"
            },
            "3": {
              "name": "constant.numeric"
            },
            "4": {
              "name": "invalid.illegal"
            },
            "5": {
              "name": "constant.numeric"
            }
          }
        },
        {
          "match": "(.+) evaluates to (.+)(,|, and|\\.)",
          "captures": {
            "1": {
              "name": "constant.numeric"
            },
            "2": {
              "name": "constant.numeric"
            }
          }
        },
        {
          "match": "\\s+Which is: (.+)",
          "captures": {
            "1": {
              "name": "constant.numeric"
            }
          }
        },
        {
          "match": "Expected: (\\(.+\\)), actual: (.+)",
          "name": "keyword",
          "captures": {
            "1": {
              "name": "constant.numeric"
            },
            "2": {
              "name": "invalid.illegal"
            }
          }
        },
        {
          "match": "Expected: (.+)",
          "name": "keyword",
          "captures": {
            "1": {
              "name": "constant.numeric"
            }
          }
        },
        {
          "match": "Actual: (.+)",
          "name": "keyword",
          "captures": {
            "1": {
              "name": "invalid.illegal"
            }
          }
        },
        {
          "match": "Expected arg #.+: (.+)",
          "name": "keyword",
          "captures": {
            "1": {
              "name": "constant.numeric"
            }
          }
        },
        {
          "match": "\\[  (FAILED)  \\]",
          "captures": {
            "1": {
              "name": "invalid.illegal"
            }
          }
        },
        {
          "match": "\\[       (OK) \\]",
          "captures": {
            "1": {
              "name": "markup.bold"
            }
          }
        },
        { "include": "#values" }
      ]
    },
    "catch2": {
      "patterns": [
        {
          "match": "\\(at .+\\)",
          "name": "comment"
        },
        {
          "match": "Exception were thrown: (.+)",
          "name": "keyword.control",
          "captures": {
            "1": {
              "name": "invalid.illegal"
            }
          }
        },
        {
          "match": "Original: (.+)",
          "name": "keyword",
          "captures": {
            "1": {
              "name": "constant.numeric"
            }
          }
        },
        {
          "match": "Expanded: (.+)",
          "name": "keyword",
          "captures": {
            "1": {
              "name": "invalid.illegal"
            }
          }
        },
        {
          "begin": "⬇ (.+):",
          "end": "⬆ \\1",
          "contentName": "string.quoted"
        },
        { "include": "#values" }
      ]
    }
  }
}
