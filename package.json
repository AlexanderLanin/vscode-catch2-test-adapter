{
  "name": "vscode-catch2-test-adapter",
  "displayName": "Copper Test Explorer",
  "description": "Run GoogleTest, Catch2 and DOCtest tests from VSCode",
  "icon": "resources/icon.png",
  "author": "Mate Pek",
  "publisher": "matepek",
  "version": "2.9.12",
  "license": "MIT",
  "homepage": "https://github.com/matepek/vscode-catch2-test-adapter",
  "repository": {
    "type": "git",
    "url": "https://github.com/matepek/vscode-catch2-test-adapter.git"
  },
  "bugs": {
    "url": "https://github.com/matepek/vscode-catch2-test-adapter/issues"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "c++",
    "test",
    "testing",
    "unit test",
    "catch2",
    "catchorg",
    "google",
    "googletest",
    "google test",
    "gtest",
    "doctest",
    "onqtam"
  ],
  "main": "out/dist/main.js",
  "scripts": {
    "reinstall": "rimraf node_modules package-lock.json && npm install",
    "clean": "rimraf out node_modules vscode-catch2-test-adapter-*.vsix",
    "watch": "tsc -watch -p ./tsconfig.json",
    "compile": "tsc -p ./tsconfig.json",
    "test": "node ./out/test/runTests.js",
    "pretest": "npm run compile",
    "package": "vsce package",
    "deploy": "node ./out/test/repo_scripts/deploy.js",
    "vscode:prepublish": "webpack --config webpack.config.js --mode production",
    "webpack": "webpack --config webpack.config.js --mode development"
  },
  "extensionDependencies": [
    "hbenl.vscode-test-explorer"
  ],
  "dependencies": {
    "debounce-collect": "^1.0.2",
    "gaze": "^1.1.3",
    "tslib": "^1.11.1",
    "vscode-test-adapter-api": "^1.8.0",
    "vscode-test-adapter-util": "^0.7.0",
    "xml2js": "^0.4.23"
  },
  "devDependencies": {
    "@sentry/node": "^5.15.5",
    "@types/bent": "^7.0.2",
    "@types/chai": "^4.2.11",
    "@types/deep-equal": "^1.0.1",
    "@types/entities": "^1.1.1",
    "@types/fs-extra": "^8.1.0",
    "@types/glob": "^7.1.1",
    "@types/mocha": "^7.0.2",
    "@types/node": "^13.13.4",
    "@types/request-promise": "4.1.46",
    "@types/sinon": "^9.0.0",
    "@types/vscode": "1.38.0",
    "@types/xml2js": "^0.4.5",
    "@typescript-eslint/eslint-plugin": "^2.30.0",
    "@typescript-eslint/parser": "^2.30.0",
    "bent": "^7.3.0",
    "deep-equal": "^2.0.3",
    "eslint": "^6.8.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-prettier": "3.1.3",
    "fs-extra": "^9.0.0",
    "glob": "^7.1.6",
    "mocha": "^7.1.2",
    "mocha-eslint": "^6.0.0",
    "prettier": "2.0.5",
    "raw-loader": "^4.0.1",
    "sinon": "^9.0.2",
    "source-map-support": "^0.5.19",
    "ts-loader": "^7.0.2",
    "typescript": "^3.8.3",
    "vsce": "^1.75.0",
    "vscode-test": "^1.3.0",
    "webpack": "^4.43.0",
    "webpack-bundle-analyzer": "^3.7.0",
    "webpack-cli": "^3.3.11"
  },
  "engines": {
    "vscode": "^1.23.0"
  },
  "activationEvents": [
    "onView:test-explorer",
    "onCommand:test-explorer.reload",
    "onCommand:test-explorer.run-all",
    "onCommand:test-explorer.run-file",
    "onCommand:test-explorer.run-test-at-cursor",
    "onCommand:test-explorer.rerun",
    "onCommand:test-explorer.debug-test-at-cursor",
    "onCommand:test-explorer.redebug",
    "onCommand:test-explorer.cancel"
  ],
  "contributes": {
    "languages": [
      {
        "id": "copper-test",
        "mimetypes": [
          "text/x-code-output",
          "x-code-output"
        ]
      }
    ],
    "grammars": [
      {
        "language": "copper-test",
        "scopeName": "source.copper-test",
        "path": "./syntaxes/copper-test.tmLanguage.json"
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Copper Test Explorer",
      "$comment": "Enums will cause that the vscode will offer auto-completion.",
      "properties": {
        "copper.test.executable": {
          "markdownDescription": "The location of your test executable (relative to the workspace folder or absolute path). For more option set [copper.test.executables](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md) instead of this. NOTE: if `copper.test.executables` is set then this is ignored.",
          "scope": "resource",
          "type": "string",
          "default": "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*"
        },
        "copper.test.executables": {
          "markdownDescription": "Array of executables with a lot of options. `null` means disabled. (If this is set then `copper.test.executable` is ignored.) ([Details](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)).",
          "scope": "resource",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "markdownDescription": "An object which describes an executable-set with settings. ([Details](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md))",
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "pattern": {
                "markdownDescription": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*",
                      "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*.exe"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  }
                ]
              },
              "name": {
                "markdownDescription": "The name of the test suite (file). Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${filename}",
                      "${relPath}",
                      "${absPath}"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  }
                ]
              },
              "description": {
                "markdownDescription": "A less prominent text after the `name`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${relDirpath}/",
                      "${absDirpath}/"
                    ]
                  },
                  {
                    "type": "string"
                  }
                ]
              },
              "cwd": {
                "markdownDescription": "The current working directory for the test executable. If it isn't provided and `defaultCwd` does, then that will be used. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${absDirpath}",
                      "${relDirpath}",
                      "${workspaceDirectory}",
                      "${workspaceFolder}"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  }
                ]
              },
              "env": {
                "type": "object",
                "markdownDescription": "Environment variables for the test executable. If it isn't provided and `defaultEnv` does, then that will be used. Can contains variables related to `pattern` and variables related to the process's environment variables (Ex.: `${os_env:PATH}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "${absPath}",
                        "${relPath}",
                        "${absDirpath}",
                        "${relDirpath}",
                        "${filename}",
                        "${baseFilename}",
                        "${extFilename}",
                        "${workspaceDirectory}",
                        "${workspaceFolder}",
                        "${workspaceName}",
                        "${cwd}",
                        "${os_env:PATH}"
                      ]
                    },
                    {
                      "type": "string",
                      "minLength": 1
                    }
                  ]
                }
              },
              "dependsOn": {
                "markdownDescription": "Array of (relative / absolute) _paths_ / [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) (string[]). If a related file is _changed/created/deleted_ and autorun is enabled in \"...\" menu it will run the related executables. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "parallelizationLimit": {
                "markdownDescription": "(Experimental) The variable maximize the number of the parallel execution of one executable instance. Note: `catch2TestExplorer.workerMaxNumber` is a global limit. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                "scope": "resource",
                "type": "integer",
                "default": 1,
                "minimum": 1
              },
              "catch2": {
                "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#framework-specific-settings)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "helpRegex": {
                    "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "string",
                    "minLength": 1
                  },
                  "prependTestRunningArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "prependTestListingArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ignoreTestEnumerationStdErr": {
                    "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "boolean"
                  },
                  "testGrouping": {
                    "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                    "additionalProperties": false,
                    "properties": {
                      "groupByExecutable": {
                        "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupBySource": {
                        "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "sourceIndex"
                        ]
                      },
                      "groupByTags": {
                        "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "tags": {
                            "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          },
                          "tagFormat": {
                            "type": "string",
                            "pattern": "\\$\\{tag\\}"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupByRegex": {
                        "markdownDescription": "Groups tests by [regex](https://regex101.com/). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      }
                    }
                  }
                }
              },
              "gtest": {
                "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#framework-specific-settings)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "helpRegex": {
                    "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "string",
                    "minLength": 1
                  },
                  "prependTestRunningArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "prependTestListingArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ignoreTestEnumerationStdErr": {
                    "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "boolean"
                  },
                  "testGrouping": {
                    "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                    "additionalProperties": false,
                    "properties": {
                      "groupByExecutable": {
                        "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupBySource": {
                        "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "sourceIndex"
                        ]
                      },
                      "groupByTags": {
                        "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "tags": {
                            "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          },
                          "tagFormat": {
                            "type": "string",
                            "pattern": "\\$\\{tag\\}"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupByRegex": {
                        "markdownDescription": "Groups tests by [regex](https://regex101.com/). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      }
                    }
                  }
                }
              },
              "doctest": {
                "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#framework-specific-settings)",
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "helpRegex": {
                    "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "string",
                    "minLength": 1
                  },
                  "prependTestRunningArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "prependTestListingArgs": {
                    "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ignoreTestEnumerationStdErr": {
                    "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                    "type": "boolean"
                  },
                  "testGrouping": {
                    "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                    "additionalProperties": false,
                    "properties": {
                      "groupByExecutable": {
                        "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupBySource": {
                        "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "label": {
                            "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "description": {
                            "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "sourceIndex"
                        ]
                      },
                      "groupByTags": {
                        "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "tags": {
                            "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "array",
                              "items": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          },
                          "tagFormat": {
                            "type": "string",
                            "pattern": "\\$\\{tag\\}"
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        }
                      },
                      "groupByRegex": {
                        "markdownDescription": "Groups tests by [regex](https://regex101.com/). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "regexes": {
                            "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "array",
                            "items": {
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "groupUngroupedTo": {
                            "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "type": "string",
                            "minLength": 1
                          },
                          "groupBySource": {
                            "type": "object"
                          },
                          "groupByTags": {
                            "type": "object"
                          },
                          "groupByRegex": {
                            "type": "object"
                          }
                        },
                        "required": [
                          "regexes"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "pattern"
            ]
          }
        },
        "copper.test.workingDirectory": {
          "markdownDescription": "Sets working directory of the test executable (relative to the workspace folder or absolute path). Note: `copper.executables` overwrites it locally.",
          "scope": "resource",
          "type": "string",
          "default": "${absDirpath}",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "${absDirpath}",
                "${relDirpath}",
                "${workspaceDirectory}",
                "${workspaceFolder}"
              ]
            },
            {
              "type": "string",
              "minLength": 1
            }
          ]
        },
        "copper.test.randomGeneratorSeed": {
          "markdownDescription": "Shuffles the tests with the given random. Catch2: [--rng-seed (<integer> or 'time')](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#rng-seed); Google Test: [--gtest_random_seed=<integer>](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#shuffling-the-tests);",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "time"
              ]
            }
          ]
        },
        "copper.test.runtimeTimeout": {
          "markdownDescription": "[seconds] Test executable is running in a process. In case of an infinite loop, it will run forever, unless this parameter is set. It applies instantly. (0 means infinite)",
          "scope": "resource",
          "type": "integer",
          "default": 600,
          "minimum": -1
        },
        "copper.test.parallelExecutionLimit": {
          "markdownDescription": "The variable maximize the number of the parallel test execution. (It applies instantly.) Note: If your executables depends on the same resource than this could cause a problem.",
          "scope": "resource",
          "type": "integer",
          "default": 1,
          "minimum": 1
        },
        "copper.discovery.watchTimeout": {
          "markdownDescription": "[seconds] Test executables are being watched (only inside the workspace directory). In case of one recompiles it will try to preserve the test states. If compilation reaches timeout it will drop the suite.",
          "scope": "resource",
          "type": "integer",
          "default": 10,
          "minimum": 1
        },
        "copper.discovery.retireTestAfter": {
          "markdownDescription": "[milisec] Retire events will be held back for the given duration. (Reload is required)",
          "scope": "resource",
          "type": "integer",
          "default": 1000,
          "minimum": 200
        },
        "copper.discovery.listingTimeout": {
          "markdownDescription": "[seconds] The timeout of the test-executable used to identify it (Calls the exec with `--help`).",
          "scope": "resource",
          "type": "integer",
          "default": 5,
          "minimum": 1,
          "maximum": 900
        },
        "copper.discovery.testListCaching": {
          "markdownDescription": "(Experimental) In case your executable took too much time to list the tests, one can set this. It will preserve the output of `--gtest_list_tests --gtest_output=xml:...`. (Beware: Older Google Test doesn't support xml test list format.) (Click [here](http://bit.ly/2HFcAC6), if you think it is a useful feature!)",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "copper.debug.configTemplate": {
          "markdownDescription": "Set the necessary debug configurations and the debug button will work.",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${label}",
                      "${suiteLabel}",
                      "${exec}",
                      "${argsArray}",
                      "${argsStr}",
                      "${cwd}",
                      "${envObj}"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "extensionOnly"
              ]
            }
          ]
        },
        "copper.debug.breakOnFailure": {
          "markdownDescription": "Debugger breaks on failure while debugging the test. Catch2: [--break](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#breaking-into-the-debugger); Google Test: [--gtest_break_on_failure](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#turning-assertion-failures-into-break-points);",
          "scope": "resource",
          "type": "boolean",
          "default": true
        },
        "copper.debug.noThrow": {
          "markdownDescription": "Skips all assertions that test that an exception is thrown, e.g. REQUIRE_THROWS. This is a Catch2 parameter: [--nothrow](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#eliding-assertions-expected-to-throw);",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "copper.log.logpanel": {
          "markdownDescription": "Creates a new output channel and write the log messages there. For debugging. Enabling it could slow down your vscode.",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "copper.log.logfile": {
          "markdownDescription": "Writes the log message into the given file. Empty means disabled.",
          "scope": "resource",
          "type": "string",
          "default": ""
        },
        "copper.log.logSentry": {
          "markdownDescription": "Errors/Exceptions will be logged and sent automatically for further analysis.",
          "scope": "resource",
          "type": "string",
          "default": "question"
        },
        "copper.log.userId": {
          "markdownDescription": "A locally generated identifier which is used to group the errors/events. Not used for anything evil. Anonymity is preserved.",
          "scope": "resource",
          "type": "string"
        },
        "copper.gtest.treatGmockWarningAs": {
          "deprecationMessage": "Will stop working unless you open an issue and tell me that how much you love it.",
          "markdownDescription": "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`. (You may should consider using [testing::StrictMock<T>](https://github.com/google/googletest/blob/master/googlemock/docs/cook_book.md#the-nice-the-strict-and-the-naggy-nicestrictnaggy))",
          "scope": "resource",
          "type": "string",
          "default": "nothing",
          "enum": [
            "nothing",
            "failure"
          ],
          "enumDescriptions": [
            "",
            "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`."
          ]
        },
        "copper.gtest.gmockVerbose": {
          "deprecationMessage": "Will stop working unless you open an issue and tell me that how much you love it.",
          "markdownDescription": "Sets [--gmock_verbose=...](https://github.com/google/googletest/blob/master/googlemock/docs/cheat_sheet.md#flags). (Note: executable has to be linked to gmock `gmock_main` not `gtest_main`)",
          "scope": "resource",
          "type": "string",
          "default": "default",
          "enum": [
            "default",
            "info",
            "warning",
            "error"
          ],
          "enumDescriptions": [
            "--gmock_verbose=... parameter won't be added",
            "Google Mock will print all informational messages, warnings, and errors (most verbose). At this setting, Google Mock will also log any calls to the ON_CALL/EXPECT_CALL macros.",
            "Google Mock will print both warnings and errors (less verbose). This is the default.",
            "Google Mock will print errors only (least verbose)."
          ]
        },
        "catch2TestExplorer.executables": {
          "deprecationMessage": "Use `copper.executable` or `copper.test.executables` instead of this.",
          "markdownDescription": "The location of your test executables (relative to the workspace folder or absolute path) and with a lot of other setting.",
          "scope": "resource",
          "default": [
            {
              "pattern": "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*"
            }
          ],
          "oneOf": [
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "oneOf": [
                  {
                    "markdownDescription": "An object with 'pattern'.",
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "pattern": {
                        "markdownDescription": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*",
                              "{build,Build,BUILD,out,Out,OUT}/**/*{test,Test,TEST}*.exe"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "name": {
                        "markdownDescription": "The name of the test suite (file). Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${filename}",
                              "${relPath}",
                              "${absPath}"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "description": {
                        "markdownDescription": "A less prominent text after the `name`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${relDirpath}/",
                              "${absDirpath}/"
                            ]
                          },
                          {
                            "type": "string"
                          }
                        ]
                      },
                      "cwd": {
                        "markdownDescription": "The current working directory for the test executable. If it isn't provided and `defaultCwd` does, then that will be used. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                        "anyOf": [
                          {
                            "type": "string",
                            "enum": [
                              "${absDirpath}",
                              "${relDirpath}",
                              "${workspaceDirectory}",
                              "${workspaceFolder}"
                            ]
                          },
                          {
                            "type": "string",
                            "minLength": 1
                          }
                        ]
                      },
                      "env": {
                        "type": "object",
                        "markdownDescription": "Environment variables for the test executable. If it isn't provided and `defaultEnv` does, then that will be used. Can contains variables related to `pattern` and variables related to the process's environment variables (Ex.: `${os_env:PATH}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                        "additionalProperties": {
                          "anyOf": [
                            {
                              "type": "string",
                              "enum": [
                                "${absPath}",
                                "${relPath}",
                                "${absDirpath}",
                                "${relDirpath}",
                                "${filename}",
                                "${baseFilename}",
                                "${extFilename}",
                                "${workspaceDirectory}",
                                "${workspaceFolder}",
                                "${workspaceName}",
                                "${cwd}",
                                "${os_env:PATH}"
                              ]
                            },
                            {
                              "type": "string",
                              "minLength": 1
                            }
                          ]
                        }
                      },
                      "dependsOn": {
                        "markdownDescription": "Array of (relative / absolute) _paths_ / [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) (string[]). If a related file is _changed/created/deleted_ and autorun is enabled in \"...\" menu it will run the related executables. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "parallelizationLimit": {
                        "markdownDescription": "(Experimental) The variable maximize the number of the parallel execution of one executable instance. Note: `catch2TestExplorer.workerMaxNumber` is a global limit. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                        "scope": "resource",
                        "type": "integer",
                        "default": 1,
                        "minimum": 1
                      },
                      "catch2": {
                        "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#framework-specific-settings)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "helpRegex": {
                            "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "string",
                            "minLength": 1
                          },
                          "prependTestRunningArgs": {
                            "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "prependTestListingArgs": {
                            "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ignoreTestEnumerationStdErr": {
                            "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "boolean"
                          },
                          "testGrouping": {
                            "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "additionalProperties": false,
                            "properties": {
                              "groupByExecutable": {
                                "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "label": {
                                    "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "description": {
                                    "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                }
                              },
                              "groupBySource": {
                                "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "label": {
                                    "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "description": {
                                    "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "sourceIndex"
                                ]
                              },
                              "groupByTags": {
                                "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "tags": {
                                    "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "array",
                                    "items": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    }
                                  },
                                  "tagFormat": {
                                    "type": "string",
                                    "pattern": "\\$\\{tag\\}"
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                }
                              },
                              "groupByRegex": {
                                "markdownDescription": "Groups tests by [regex](https://regex101.com/). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "regexes": {
                                    "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "regexes"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "gtest": {
                        "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#framework-specific-settings)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "helpRegex": {
                            "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "string",
                            "minLength": 1
                          },
                          "prependTestRunningArgs": {
                            "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "prependTestListingArgs": {
                            "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ignoreTestEnumerationStdErr": {
                            "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "boolean"
                          },
                          "testGrouping": {
                            "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "additionalProperties": false,
                            "properties": {
                              "groupByExecutable": {
                                "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "label": {
                                    "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "description": {
                                    "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                }
                              },
                              "groupBySource": {
                                "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "label": {
                                    "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "description": {
                                    "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "sourceIndex"
                                ]
                              },
                              "groupByTags": {
                                "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "tags": {
                                    "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "array",
                                    "items": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    }
                                  },
                                  "tagFormat": {
                                    "type": "string",
                                    "pattern": "\\$\\{tag\\}"
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                }
                              },
                              "groupByRegex": {
                                "markdownDescription": "Groups tests by [regex](https://regex101.com/). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "regexes": {
                                    "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "regexes"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "doctest": {
                        "markdownDescription": "Object with framework specific settings. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#framework-specific-settings)",
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "helpRegex": {
                            "markdownDescription": "A javascript [regex](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions) which will be used to recognise the framework. Flags: `su`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "string",
                            "minLength": 1
                          },
                          "prependTestRunningArgs": {
                            "markdownDescription": "Additinal argument array passed to the executable when it is called for testing. Good for experimental features like `[\"--benchmark-samples\", \"10\"]`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "prependTestListingArgs": {
                            "markdownDescription": "Additinal argument array passed to the executable when it is called for test listing. (Discouraged. Try to use environment variables to pass values.) [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "ignoreTestEnumerationStdErr": {
                            "markdownDescription": "If false (or undefined) and there are something on `stderr` then test-listing will fail. Otherwise it will ignore the `stderr` and test listing will try to parse the `stdout`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md)",
                            "type": "boolean"
                          },
                          "testGrouping": {
                            "markdownDescription": "Groups the tests inside the executable. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                            "additionalProperties": false,
                            "properties": {
                              "groupByExecutable": {
                                "markdownDescription": "Groups tests by the executable file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "label": {
                                    "markdownDescription": "The label of the test executable. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "description": {
                                    "markdownDescription": "A less prominent text after the `label`. Can contains variables related to `pattern`. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                }
                              },
                              "groupBySource": {
                                "markdownDescription": "Groups the tests by the source file. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "label": {
                                    "markdownDescription": "Label of the group. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "description": {
                                    "markdownDescription": "Less prominent text next to label. Can be indexed. (`${sourceRelPath}`, `${sourceAbsPath}`). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string"
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "sourceIndex"
                                ]
                              },
                              "groupByTags": {
                                "markdownDescription": "Group test by tags. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "tags": {
                                    "markdownDescription": "True to group by every exiting combination of the tags. Or it can be an array of tags: `[\"[tag1][tag2]\", \"tag2\", \"tag3\"]` [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "array",
                                    "items": {
                                      "type": "array",
                                      "items": {
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    }
                                  },
                                  "tagFormat": {
                                    "type": "string",
                                    "pattern": "\\$\\{tag\\}"
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                }
                              },
                              "groupByRegex": {
                                "markdownDescription": "Groups tests by [regex](https://regex101.com/). [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "regexes": {
                                    "markdownDescription": "Groups by the first match group (enclosed by parentheses like this). of the first matching [regex](https://regex101.com/). Example: `[\"(?:good|bad) (apple|peach)\"]` will create 2 groups and put the matched tests inside it. Hint: Grouping starting with \"?:\" won't count as a match group. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "groupUngroupedTo": {
                                    "markdownDescription": "Ungroupable elements will be grouped under the given value. [Detail](https://github.com/matepek/vscode-catch2-test-adapter/blob/master/documents/configuration/executables.config.md#testgrouping)",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "groupBySource": {
                                    "type": "object"
                                  },
                                  "groupByTags": {
                                    "type": "object"
                                  },
                                  "groupByRegex": {
                                    "type": "object"
                                  }
                                },
                                "required": [
                                  "regexes"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "pattern"
                    ]
                  },
                  {
                    "markdownDescription": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
                    "type": "string",
                    "minLength": 1
                  }
                ]
              }
            },
            {
              "markdownDescription": "A relative (to workspace directory) or an absolute path or [_glob pattern_](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options). ‚ö†Ô∏è**Avoid backslash!**: üö´`\\`; ‚úÖ`/`; (required)",
              "type": "string",
              "minLength": 1
            },
            {
              "markdownDescription": "null means it is disabled",
              "type": "null"
            }
          ]
        },
        "catch2TestExplorer.defaultCwd": {
          "deprecationMessage": "Use `copper.test.workingDirectory` instead of this.",
          "markdownDescription": "The working directory where the test is run (relative to the workspace folder or absolute path), if it isn't provided in \"executables\". (It resolves variables.)",
          "scope": "resource",
          "type": "string",
          "default": "${absDirpath}",
          "anyOf": [
            {
              "type": "string",
              "enum": [
                "${absDirpath}",
                "${relDirpath}",
                "${workspaceDirectory}",
                "${workspaceFolder}"
              ]
            },
            {
              "type": "string",
              "minLength": 1
            }
          ]
        },
        "catch2TestExplorer.defaultEnv": {
          "deprecationMessage": "Set the variables in `copper.test.executables` instead of this.",
          "markdownDescription": "Environment variables to be set when running the tests. (It resolves variables.)",
          "type": "object",
          "additionalProperties": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "${absPath}",
                  "${relPath}",
                  "${absDirpath}",
                  "${relDirpath}",
                  "${filename}",
                  "${baseFilename}",
                  "${extFilename}",
                  "${workspaceDirectory}",
                  "${workspaceFolder}",
                  "${workspaceName}",
                  "${cwd}"
                ]
              },
              {
                "type": "string",
                "minLength": 1
              }
            ]
          },
          "default": {},
          "scope": "resource"
        },
        "catch2TestExplorer.defaultRngSeed": {
          "deprecationMessage": "Use `copper.test.randomGeneratorSeed` instead of this.",
          "markdownDescription": "Shuffles the tests with the given random. Catch2: [--rng-seed (<integer> or 'time')](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#rng-seed); Google Test: [--gtest_random_seed=<integer>](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#shuffling-the-tests);",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "time"
              ]
            }
          ]
        },
        "catch2TestExplorer.defaultWatchTimeoutSec": {
          "deprecationMessage": "Use `copper.test.watchTimeoutInSeconds` instead of this.",
          "markdownDescription": "Test executables are being watched (only inside the workspace directory). In case of one recompiles it will try to preserve the test states. If compilation reaches timeout it will drop the suite.",
          "scope": "resource",
          "type": "integer",
          "default": 10,
          "minimum": 1
        },
        "catch2TestExplorer.retireDebounceTimeMilisec": {
          "deprecationMessage": "Use `copper.discovery.retireTestAfter` instead of this.",
          "markdownDescription": "Retire events will be held back for the given duration. (Reload is required)",
          "scope": "resource",
          "type": "integer",
          "default": 1000,
          "minimum": 200
        },
        "catch2TestExplorer.defaultRunningTimeoutSec": {
          "deprecationMessage": "Use `copper.test.runtimeTimeout` instead of this.",
          "markdownDescription": "Test executable is running in a process. In case of an infinite loop, it will run forever, unless this parameter is set. It applies instantly. (0 means infinite)",
          "scope": "resource",
          "type": "integer",
          "default": 600,
          "minimum": -1
        },
        "catch2TestExplorer.defaultExecParsingTimeoutSec": {
          "deprecationMessage": "Use `copper.discovery.listingTimeout` instead of this.",
          "markdownDescription": "The timeout duration (in seconds) of the test-executable identifier (Calls the exec with `--help`).",
          "scope": "resource",
          "type": "integer",
          "default": 5,
          "minimum": 1,
          "maximum": 900
        },
        "catch2TestExplorer.workerMaxNumber": {
          "deprecationMessage": "Use `copper.test.parallelExecutionLimit` instead of this.",
          "markdownDescription": "The variable maximize the number of the parallel test execution. It applies instantly.",
          "scope": "resource",
          "type": "integer",
          "default": 1,
          "minimum": 1
        },
        "catch2TestExplorer.debugConfigTemplate": {
          "deprecationMessage": "Use `copper.debug.configTemplate` instead of this.",
          "markdownDescription": "Set the necessary debug configurations and the debug button will work.",
          "scope": "resource",
          "default": null,
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": {
                "anyOf": [
                  {
                    "type": "string",
                    "enum": [
                      "${label}",
                      "${suiteLabel}",
                      "${exec}",
                      "${argsArray}",
                      "${argsStr}",
                      "${cwd}",
                      "${envObj}"
                    ]
                  },
                  {
                    "type": "string",
                    "minLength": 1
                  },
                  {
                    "type": "array"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "null"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            {
              "type": "null"
            },
            {
              "type": "string",
              "enum": [
                "extensionOnly"
              ]
            }
          ]
        },
        "catch2TestExplorer.debugBreakOnFailure": {
          "deprecationMessage": "Use `copper.debug.breakOnFailure` instead of this.",
          "markdownDescription": "Debugger breaks on failure while debugging the test. Catch2: [--break](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#breaking-into-the-debugger); Google Test: [--gtest_break_on_failure](https://github.com/google/googletest/blob/master/googletest/docs/advanced.md#turning-assertion-failures-into-break-points);",
          "scope": "resource",
          "type": "boolean",
          "default": true
        },
        "catch2TestExplorer.defaultNoThrow": {
          "deprecationMessage": "Use `copper.debug.noThrow` instead of this.",
          "markdownDescription": "Skips all assertions that test that an exception is thrown, e.g. REQUIRE_THROWS. This is a Catch2 parameter: [--nothrow](https://github.com/catchorg/Catch2/blob/master/docs/command-line.md#eliding-assertions-expected-to-throw);",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "catch2TestExplorer.logpanel": {
          "deprecationMessage": "Use `copper.log.logpanel` instead of this.",
          "markdownDescription": "Creates a new output channel and write the log messages there. For debugging. Enabling it could slow down your vscode.",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "catch2TestExplorer.logfile": {
          "deprecationMessage": "Use `copper.log.logfile` instead of this.",
          "markdownDescription": "Writes the log message into the given file. Empty means disabled.",
          "scope": "resource",
          "type": "string",
          "default": ""
        },
        "catch2TestExplorer.logSentry": {
          "deprecationMessage": "Use `copper.log.logSentry` instead of this.",
          "markdownDescription": "Errors/Exceptions will be logged and sent automatically for further analysis.",
          "scope": "resource",
          "type": "string",
          "default": "question"
        },
        "catch2TestExplorer.userId": {
          "deprecationMessage": "Use `copper.log.userId` instead of this.",
          "markdownDescription": "A locally generated identifier which is used to group the errors/events.",
          "scope": "resource",
          "type": "string",
          "default": ""
        },
        "catch2TestExplorer.enableTestListCaching": {
          "deprecationMessage": "Use `copper.discovery.testListCaching` instead of this.",
          "markdownDescription": "(Experimental) In case your executable took too much time to list the tests, one can set this. It will preserve the output of `--gtest_list_tests --gtest_output=xml:...`. (Beware: Older Google Test doesn't support xml test list format.) (Click [here](http://bit.ly/2HFcAC6), if you think it is a useful feature!)",
          "scope": "resource",
          "type": "boolean",
          "default": false
        },
        "catch2TestExplorer.googletest.treatGmockWarningAs": {
          "deprecationMessage": "Use `copper.gtest.treatGmockWarningAs` instead of this.",
          "markdownDescription": "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`. (You may should consider using [testing::StrictMock<T>](https://github.com/google/googletest/blob/master/googlemock/docs/cook_book.md#the-nice-the-strict-and-the-naggy-nicestrictnaggy))",
          "scope": "resource",
          "type": "string",
          "default": "nothing",
          "enum": [
            "nothing",
            "failure"
          ],
          "enumDescriptions": [
            "",
            "Forces the test to be failed even it is passed if it contains the string `GMOCK_WARNING:`."
          ]
        },
        "catch2TestExplorer.googletest.gmockVerbose": {
          "deprecationMessage": "Use `copper.gtest.gmockVerbose` instead of this.",
          "markdownDescription": "Sets [--gmock_verbose=...](https://github.com/google/googletest/blob/master/googlemock/docs/cheat_sheet.md#flags). (Note: executable has to be linked to gmock `gmock_main` not `gtest_main`)",
          "scope": "resource",
          "type": "string",
          "default": "default",
          "enum": [
            "default",
            "info",
            "warning",
            "error"
          ],
          "enumDescriptions": [
            "--gmock_verbose=... parameter won't be added",
            "Google Mock will print all informational messages, warnings, and errors (most verbose). At this setting, Google Mock will also log any calls to the ON_CALL/EXPECT_CALL macros.",
            "Google Mock will print both warnings and errors (less verbose). This is the default.",
            "Google Mock will print errors only (least verbose)."
          ]
        }
      }
    }
  }
}
